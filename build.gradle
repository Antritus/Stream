plugins {
    id "java-library"
    id "io.github.pacifistmc.forgix" version "1.2.9"
    id "cosmicloom" apply false
    id "jigsaw" apply false
    id "com.github.johnrengelman.shadow" apply false
    id "maven-publish"
}

forgix {
    group = "${group}"
    mergedJarName = "${mod_name}-${project.version}.jar"
    outputDir = "build/libs"

    quilt {
        projectName = "quilt"
        jarLocation = "build/libs/quilt-${project.version}.jar"
    }

    custom {
        projectName = "puzzle"
        jarLocation = "build/libs/puzzle-${project.version}-merged-bundle.jar"
    }
}
java {
    withJavadocJar()
    withSourcesJar()

    sourceCompatibility = JavaVersion.VERSION_17
    targetCompatibility = JavaVersion.VERSION_17
    toolchain.languageVersion.set(JavaLanguageVersion.of(17))

}

subprojects {
    apply plugin: 'java'
    apply plugin: "maven-publish"

    repositories {
        maven {
            name "JitPack"
            url "https://jitpack.io"
        }
    }

    java {
        withSourcesJar()
        withJavadocJar()

        sourceCompatibility = JavaVersion.VERSION_17
        targetCompatibility = JavaVersion.VERSION_17
        toolchain.languageVersion.set(JavaLanguageVersion.of(17))
    }

    processResources {
        def resourceTargets = ['puzzle.mod.json', 'quilt.mod.json', '*.mixins.json']
        def replaceProperties = [
                "mod_version": version,
                "group": project.group,
                "cosmic_reach_version": cosmic_reach_version,
                "mod_name": mod_name,
                "mod_developer": mod_developer,
                "mod_id": mod_id,
                "description": project.description,
                "cosmic_quilt_version": cosmic_quilt_version,
                "quilt_sources_entry_point": quilt_sources_entry_point,
                "puzzle_loader_version": puzzle_loader_version,
                "puzzle_source_initializer": puzzle_source_initializer,
                "puzzle_source_pre_initializer": puzzle_source_pre_initializer,
                "issues": issue_tracker,
                "homepage": homepage,
                "sources": sources,
                "issue_tracker": issue_tracker
        ]


        inputs.properties replaceProperties
        replaceProperties.put "project", project
        filesMatching(resourceTargets) {
            expand replaceProperties
        }
    }

    publishing {
        publications {
            maven(MavenPublication) {
                groupId = "com.github.antritus"
                version = version
                artifactId = "stream-"+project.name
                from components.java
            }
        }
    }
}
publishing {
    publications {
        maven(MavenPublication) {
            groupId = "com.github.antritus"
            artifactId = "stream"
            version = version
            from components.java
        }
    }
}

tasks.register("buildAll") {
    group = "ModMixer"
    dependsOn(rootProject.tasks.named("build"))
    rootProject.project(":quilt").tasks.matching { it.name == "build" }.all { dependsOn(it) }
    rootProject.project(":puzzle").tasks.matching { it.name == "buildMergedBundleJar" }.all { dependsOn(it) }
    finalizedBy(rootProject.tasks.named("mergeJars"))
}

tasks.register('cleanAll') {
    group = "ModMixer"
    dependsOn rootProject.project(':').tasks.clean
    dependsOn rootProject.project(':quilt').tasks.clean
    dependsOn rootProject.project(':puzzle').tasks.clean
    dependsOn rootProject.tasks.clean
}


javadoc {
    if(JavaVersion.current().isJava9Compatible()) {
        options.addBooleanOption('html5', true)
    }
}